//
//  ExampleChildCoordinator.swift
//  VIPCleanPOC
//
//  Created by Mohamed Hisham on 10/11/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects
//

import Foundation
import UIKit

class ExampleChildCoordinator: ExampleChildCoordinatorProtocol,BaseCoordinatorProtocol {
    var dependencies: Array<BaseCoordinatorProtocol> = []
    private var callback: ExampleChildCoordinatorCall?
    private let navigationController: UINavigationController
    private var controller: ExampleChildControllerProtocol?
    private var interactor: ExampleChildInteractorProtocol
    private var presenter: ExampleChildPresenterProtocol
    
    required init(useCase: ExampleChildCoordinatorUseCaseProtocol) {
        navigationController = useCase.navigationController
        interactor = ExampleChildInteractor()
        presenter = ExampleChildPresenter()
        interactor.presenter = self.presenter
        
        controller = ExampleChildController(interactor: interactor, callback: processControllerCallback())
        presenter.controller = self.controller
    }
    
    func start(callback: @escaping ExampleChildCoordinatorCall) {
        self.callback = callback
        let view: ExampleChildViewProtocol & UIViewController = ExampleChildView()
        controller?.view = view
        self.navigationController.pushViewController(view, animated: true)
    }
}

private extension ExampleChildCoordinator {
    
    func processControllerCallback() -> ExampleChildControllerCallback {
        
        return {[weak self] type in
            switch type {
            case .close:
                print("Closed")
                self?.callback.map { $0(.close)}
            case .back:
                print("Back")
                self?.callback.map { $0(.back)}
            }
        }
    }
    
}
