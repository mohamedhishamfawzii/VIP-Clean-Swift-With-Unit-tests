//
//  ExampleCoordinator.swift
//  VIPCleanPOC
//
//  Created by Mohamed Hisham on 10/11/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects
//

import Foundation
import UIKit

class ExampleCoordinator: ExampleCoordinatorProtocol,BaseCoordinatorProtocol {
    //ðŸ’¡ A call back function used to communicate this coordinator with the parent coordinator
    private var callback: ExampleCoordinatorCall?
    
    //ðŸ’¡ dependencies is an array to keep refrence of all the coordinator pushed by the current coordinator once removed from the array the pushed coordinator with all of it's entites (controller , presenter , view , interactor) are deallocated from the memory
    var dependencies: Array<BaseCoordinatorProtocol> = []
    
    //ðŸ’¡ a navigation controler or window (in case it's the root view controller) that is injected by the parent coordinator/file
    private let window: UIWindow?
    private var navigationController: UINavigationController?
    //ðŸ’¡ the coordinator is the entity that handles the DI so that when the coordinator is deallocated from the memory all of the entites is deallocated
    private var controller: ExampleControllerProtocol?
    private var interactor: ExampleInteractorProtocol
    private var presenter: ExamplePresenterProtocol
    
    //ðŸ’¡The coordinator intializer takes a usecase protocol which represents all the dependencies that the coordinator will need to start for example a string from the previous view
    required init(useCase: ExampleCoordinatorUseCaseProtocol) {
        window = useCase.window
        interactor = ExampleInteractor()
        presenter = ExamplePresenter()
        interactor.presenter = self.presenter
        controller = ExampleController(interactor: interactor, callback: processControllerCallback())
        presenter.controller = self.controller
    }
    //ðŸ’¡ The start function is the function used to start the coordinator passed to it a closure that represents the back communication between the child Coordinator and the parent coorinator for example the child view has to notify the parent view when it's closed to remove the child refrence from the parent
    func start(callback: @escaping ExampleCoordinatorCall) {
        self.callback = callback
        let view: ExampleViewProtocol & UIViewController = ExampleView()
        controller?.view = view
        let navigationController = UINavigationController(rootViewController: view)
        self.window?.rootViewController = navigationController
        self.window?.makeKeyAndVisible()
        self.navigationController = navigationController
    }
}

private extension ExampleCoordinator {
    
    //ðŸ’¡ processControllerCallback is the function that is assigned to the controller to communicate the navigation actions from the controller to the coordinator
    func processControllerCallback() -> ExampleControllerCallback {
        return {[weak self] type in
            guard let self = self else { return }
            switch type {
            case .close:
                //for example here when the controller notifys the coordinator to be closed the coordinator uses it's callback function to cimmunicate with the parent coorfinator to tell it that it is closed
                print("Closed")
                self.callback.map { $0(.close)}
            case .back:
                print("Back")
            case .navigateToChild:
                self.navigateToChild()
            }
        }
    }
    func navigateToChild(){
        struct UseCase: ExampleChildCoordinatorUseCaseProtocol {
            var navigationController: UINavigationController
        }
        
        guard let navigationController = self.navigationController else { return  }
        let useCase = UseCase(navigationController: navigationController)
        let coordinator = ExampleChildCoordinator(useCase: useCase)
        coordinator.start { [weak self] type in
            guard let self = self else { return }
            switch type {
            case .close, .back:
                self.dependencies.removeElementByReference(coordinator)
                self.navigationController?.popViewController(animated: true)
            }
        }
        self.dependencies.append(coordinator)
    }
    
    
}
